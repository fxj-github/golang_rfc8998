// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate.go. DO NOT EDIT.

package fiat

import (
	"crypto/subtle"
	"errors"
)

// SM2Element is an integer modulo 2^256 - 2^224 - 2^96 + 2^64 - 1.
//
// The zero value is a valid zero element.
type SM2Element struct {
	// Values are represented internally always in the Montgomery domain, and
	// converted in Bytes and SetBytes.
	x sm2MontgomeryDomainFieldElement
}

const sm2ElementLen = 32

type sm2UntypedFieldElement = [4]uint64

// One sets e = 1, and returns e.
func (e *SM2Element) One() *SM2Element {
	sm2SetOne(&e.x)
	return e
}

// Equal returns 1 if e == t, and zero otherwise.
func (e *SM2Element) Equal(t *SM2Element) int {
	eBytes := e.Bytes()
	tBytes := t.Bytes()
	return subtle.ConstantTimeCompare(eBytes, tBytes)
}

var sm2ZeroEncoding = new(SM2Element).Bytes()

// IsZero returns 1 if e == 0, and zero otherwise.
func (e *SM2Element) IsZero() int {
	eBytes := e.Bytes()
	return subtle.ConstantTimeCompare(eBytes, sm2ZeroEncoding)
}

// Set sets e = t, and returns e.
func (e *SM2Element) Set(t *SM2Element) *SM2Element {
	e.x = t.x
	return e
}

// Bytes returns the 32-byte big-endian encoding of e.
func (e *SM2Element) Bytes() []byte {
	// This function is outlined to make the allocations inline in the caller
	// rather than happen on the heap.
	var out [sm2ElementLen]byte
	return e.bytes(&out)
}

func (e *SM2Element) bytes(out *[sm2ElementLen]byte) []byte {
	var tmp sm2NonMontgomeryDomainFieldElement
	sm2FromMontgomery(&tmp, &e.x)
	sm2ToBytes(out, (*sm2UntypedFieldElement)(&tmp))
	sm2InvertEndianness(out[:])
	return out[:]
}

// sm2MinusOneEncoding is the encoding of -1 mod p, so p - 1, the
// highest canonical encoding. It is used by SetBytes to check for non-canonical
// encodings such as p + k, 2p + k, etc.
var sm2MinusOneEncoding = new(SM2Element).Sub(
	new(SM2Element), new(SM2Element).One()).Bytes()

// SetBytes sets e = v, where v is a big-endian 32-byte encoding, and returns e.
// If v is not 32 bytes or it encodes a value higher than 2^256 - 2^224 - 2^96 + 2^64 - 1,
// SetBytes returns nil and an error, and e is unchanged.
func (e *SM2Element) SetBytes(v []byte) (*SM2Element, error) {
	if len(v) != sm2ElementLen {
		return nil, errors.New("invalid SM2Element encoding")
	}
	for i := range v {
		if v[i] < sm2MinusOneEncoding[i] {
			break
		}
		if v[i] > sm2MinusOneEncoding[i] {
			return nil, errors.New("invalid SM2Element encoding")
		}
	}
	var in [sm2ElementLen]byte
	copy(in[:], v)
	sm2InvertEndianness(in[:])
	var tmp sm2NonMontgomeryDomainFieldElement
	sm2FromBytes((*sm2UntypedFieldElement)(&tmp), &in)
	sm2ToMontgomery(&e.x, &tmp)
	return e, nil
}

// Add sets e = t1 + t2, and returns e.
func (e *SM2Element) Add(t1, t2 *SM2Element) *SM2Element {
	sm2Add(&e.x, &t1.x, &t2.x)
	return e
}

// Sub sets e = t1 - t2, and returns e.
func (e *SM2Element) Sub(t1, t2 *SM2Element) *SM2Element {
	sm2Sub(&e.x, &t1.x, &t2.x)
	return e
}

// Mul sets e = t1 * t2, and returns e.
func (e *SM2Element) Mul(t1, t2 *SM2Element) *SM2Element {
	sm2Mul(&e.x, &t1.x, &t2.x)
	return e
}

// Square sets e = t * t, and returns e.
func (e *SM2Element) Square(t *SM2Element) *SM2Element {
	sm2Square(&e.x, &t.x)
	return e
}

// Select sets v to a if cond == 1, and to b if cond == 0.
func (v *SM2Element) Select(a, b *SM2Element, cond int) *SM2Element {
	sm2Selectznz((*sm2UntypedFieldElement)(&v.x), sm2Uint1(cond),
		(*sm2UntypedFieldElement)(&b.x), (*sm2UntypedFieldElement)(&a.x))
	return v
}

func sm2InvertEndianness(v []byte) {
	for i := 0; i < len(v)/2; i++ {
		v[i], v[len(v)-1-i] = v[len(v)-1-i], v[i]
	}
}
